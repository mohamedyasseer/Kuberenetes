Dynamic Provisioning Lab for Kubernetes using NFS and Helm

In this lab, we will set up dynamic provisioning in a Kubernetes cluster using NFS and Helm. 
This will involve setting up an NFS server, configuring a dynamic NFS storage class, and deploying an application using Helm that utilizes the dynamically provisioned storage.

1. Set up the NFS Server

To provision storage dynamically, we need an NFS server. This server can be hosted on a separate machine or even within the Kubernetes cluster.

Step 1.1: Install NFS server on a host

On an Ubuntu-based system, use the following commands to set up the NFS server:


sudo apt-get update
sudo apt-get install nfs-kernel-server -y
On Workers and master install below 
sudo apt-get update
sudo apt-get install -y nfs-common





Step 1.2: Configure the NFS export

Create a directory to export over NFS and give appropriate permissions:


sudo mkdir /srv/nfs/kubedata
sudo chown nobody:nogroup /srv/nfs/kubedata
sudo chmod 777 /srv/nfs/kubedata

Step 1.3: Edit the NFS export file

Edit the NFS export file to allow access from the Kubernetes cluster:


sudo vim /etc/exports


Add the following line to the exports file:
/srv/nfs/kubedata *(rw,sync,no_subtree_check,no_root_squash)

Step 1.4: Export the NFS share and restart the NFS service

To export the NFS share and apply the configuration, run:


sudo exportfs -rav
sudo systemctl restart nfs-kernel-server

2. Install NFS Provisioner using Helm

Using Helm, we will install the NFS provisioner, which will allow Kubernetes to dynamically create PersistentVolumes using NFS.

Step 2.1: Add Helm stable repository (if not added)

If you haven't added the Helm stable repository yet, use the following command:


helm repo add nfs-subdir-external-provisioner https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner/
helm repo update

Step 2.2: Install the NFS Provisioner

Install the NFS provisioner using Helm with the following command. Be sure to replace `<NFS_SERVER_IP>` with the IP address of your NFS server:


helm install nfs-provisioner \ nfs-subdir-external-provisioner/nfs-subdir-external-provisioner \
   --set nfs.server=<NFS_SERVER_IP> \
   --set nfs.path=/srv/nfs/kubedata

3. Verify the NFS Provisioner Setup

You can check if the storage class is successfully created and ready by running the following command:

kubectl get storageclass

4. Create a PersistentVolumeClaim (PVC)
Step 4.1: Create a `pvc.yaml` file

Create a `pvc.yaml` file with the following content:


apiVersion: v1
kind: PersistentVolumeClaim
metadata:
 name: nfs-pvc
spec:
 accessModes:
   - ReadWriteMany
 resources:
   requests:
     storage: 1Gi
 storageClassName: nfs-cleint

Step 4.2: Apply the PVC

Apply the PVC using the following command:


kubectl apply -f pvc.yaml

5. Deploy an Application using Helm and the PVC

Now that the NFS dynamic provisioning is working, we will deploy an application that uses this PVC for storage.

Step 5.1: Create a Helm chart with a values.yaml file to reference the PVC

Here is an example `values.yaml` file for deploying an NGINX server with the PVC:

replicaCount: 1
image:
  repository: nginx
  tag: latest
service:
  type: ClusterIP
  port: 80
ingress:
  enabled: false
  annotations: {}
  hosts:
    - host: chart-example.local
      paths: []
  tls: []
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
serviceAccount:
  create: false
  name: ""
volumeMounts:
  - mountPath: /usr/share/nginx/html
    name: html-data
volumes:
  - name: html-data
    persistentVolumeClaim:
         claimName: nfs-pvc




Step 5.2: Deploy the Helm chart

Deploy the Helm chart using the following command:

helm create <your-helm-chart>
helm package <your-helm-chart>
helm install my-nginx ./your-helm-chart

6. Verify the Application

Check the PVC, PV, and application pod to verify that everything is working as expected:


kubectl get pvc
kubectl get pv
kubectl get pods